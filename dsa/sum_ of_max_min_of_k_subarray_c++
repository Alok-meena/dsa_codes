You are given an array consisting of N integers, and an integer, K. Your task is to determine the total sum of the minimum element and the maximum element of all subarrays of size K.

Note :

The array may contain duplicate elements.
The array can also contain negative integers.
The size of the array is at least 2.
There exists at least one such subarray of size k.


approach 1 : Brute force approach  (O(N2)) may cause tle 

vector<int> ans;
    
    for(int i = 0; i < n; i++) {
        int min = INT_MAX;
        int max = INT_MIN;
        int j = i;
        int count = 0;
        while(count < k && j < n) { // Adjust loop condition
            if(nums[j] > max) {
                max = nums[j];
            }
            if(nums[j] < min) {
                min = nums[j];
            }
            j++;
            count++;
        }
        
        if(count == k) { // Only consider if the subarray size is exactly k
            int sum = min + max;
            ans.push_back(sum);
        }
    }
    
    long long totalSum = 0;
    for(int i = 0; i < ans.size(); i++) {
        totalSum += ans[i];
    }
    return totalSum;

approach 2: using deque

#include<iostream>
#include<queue>
using namespace std;

int solve(int *arr, int n, int k) {

    deque<int> maxi(k);
    deque<int> mini(k);

    //Addition of first k size window

    for(int i=0; i<k; i++) {

        while(!maxi.empty() && arr[maxi.back()] <= arr[i])
            maxi.pop_back();

        while(!mini.empty() && arr[mini.back()] >= arr[i])
            mini.pop_back();

        maxi.push_back(i);
        mini.push_back(i);
    }
    int ans = 0;

    ans += arr[maxi.front()] + arr[mini.front()];

    //remaining windows ko process karlo
    for(int i=k; i<n; i++) {

        

        //next window

        //removal
        while(!maxi.empty() && i - maxi.front() >=k) {
            maxi.pop_front();
        }

        while(!mini.empty() && i - mini.front() >=k) {
            mini.pop_front();
        }

        //addition

        while(!maxi.empty() && arr[maxi.back()] <= arr[i])
            maxi.pop_back();

        while(!mini.empty() && arr[mini.back()] >= arr[i])
            mini.pop_back();

        maxi.push_back(i);
        mini.push_back(i);    

        ans += arr[maxi.front()] + arr[mini.front()];
    }
    return ans;
}

int main() {


    int arr[7] = {2, 5, -1, 7, -3, -1, -2};
    int k = 4;
    cout << solve(arr, 7, k) << endl;


    return 0;
}


3rd way:


#include <bits/stdc++.h>
using namespace std;

long long sumOfMaxAndMin(vector<int> &nums, int n, int k) {
    int i = 0;
    int j = 0;
    deque<int> q1; // for min element
    deque<int> q2; // for max element
    deque<int> q;
    int max = INT_MIN;
    int min = INT_MAX;
    
    while (j < n) {
        // Add current element to maxDeque maintaining decreasing order
        while (!q2.empty() && nums[j] >= nums[q2.back()])
            q2.pop_back();
        q2.push_back(j);
        
        // Add current element to minDeque maintaining increasing order
        while (!q1.empty() && nums[j] <= nums[q1.back()])
            q1.pop_back();
        q1.push_back(j);
        
        if (j - i + 1 < k) {
            j++;
        } else {
            int a = nums[q1.front()];
            int b = nums[q2.front()];
            int sum = a + b;
            q.push_back(sum);
            
            // Remove elements out of the window
            if (q1.front() == i)
                q1.pop_front();
            if (q2.front() == i)
                q2.pop_front();
            
            i++;
            j++;
        }
    }
    
    long long sum = 0;
    while (!q.empty()) {
        sum += q.front();
        q.pop_front();
    }
    return sum;
}
